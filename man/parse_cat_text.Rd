% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse-cat-text.R
\name{parse_cat_text}
\alias{parse_cat_text}
\title{Parse a string to ensure correct parentheses matching and find the end
of a \code{\link[=cat]{cat()}} call}
\usage{
parse_cat_text(str_vec, ret_inds = FALSE, verbose = FALSE)
}
\arguments{
\item{str_vec}{A vector of strings which starts with a 'cat('}

\item{ret_inds}{Logical. If \code{TRUE}, return the indices of the input
vector instead of the actual values. If \code{FALSE}, return the values
(default behaviour)}

\item{verbose}{Show details about what was matched and pushed to or
popped off the stack}
}
\value{
The text that is actually inside the 'cat(' call (as a vector
of strings, same as what was passed in). The 'cat(' and ')' are not
included in the return text
}
\description{
Simple character parser with stack implementation used to match parentheses
in the input string and to find the final closing paren for the \code{\link[=cat]{cat()}} call
which must start off the string
}
\details{
A vector of strings is passed in starting with 'cat(' but is is unknown
where this call ends, i.e. where is the matching ')' for this call.
This function is a simple parser to parse the vector text one character
at a time, matching parentheses of arbitrary complexity as it goes,
trying to find the matching ')' to end the 'cat('. Ad a side effect,
the paren matching algorithm sill detect incorrectly nested parentheses
and throw an error.

Either single or double quotes can be used to surround the text passed
to \code{\link[=cat]{cat()}} in the string.
}
\keyword{internal}
